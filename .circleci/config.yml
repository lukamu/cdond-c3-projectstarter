version: 2.1

parameters:
  node-image:
    type: string
    default: "circleci/node:13.8.0"
  aws-cli-image:
    type: string
    default: "amazon/aws-cli"
  python-image:
    type: string
    default: "python:3.7-alpine3.11"
  nodejs-awscli-image:
    type: string
    default: "travnels/circleci-nodejs-awscli:latest"
  region:
    type: string
    default: "us-east-2"

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-<< parameters.workflow_id >> --force
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
            --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            echo "Value sent to memstash: $SUCCESS"
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
            #  Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend && npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: v1-frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend && npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: << pipeline.parameters.node-image >>
    steps:
      - checkout
      - restore_cache:
          keys: [v1-frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm run test

  test-backend:
    docker:
      - image: << pipeline.parameters.node-image >>
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm run test

  scan-frontend:
    docker:
      - image: << pipeline.parameters.node-image >>
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Audit front-end
          command: |
            cd frontend
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: << pipeline.parameters.node-image >>
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Audit back-end
          command: |
            cd backend
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: << pipeline.parameters.aws-cli-image >>
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --region << pipeline.parameters.region >> \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}

  configure-infrastructure:
    docker:
      - image: << pipeline.parameters.python-image >>
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["40:c1:5f:92:63:03:a3:b0:19:a0:12:0f:8a:44:59:02"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
      - run:
          name: Configure server
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}

  run-migrations:
    docker:
      - image: << pipeline.parameters.nodejs-awscli-image >>
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend && npm i
            npm run migrations > migrated.txt
            cat migrated.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if egrep "has been executed successfully|No migrations are pending" migrated.txt
            then
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi

            SUCCESS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
            --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            echo "Value sent to memstash: $SUCCESS"
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}

  deploy-frontend:
    docker:
      - image: << pipeline.parameters.nodejs-awscli-image >>
    steps:
      - checkout
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --region << pipeline.parameters.region >> \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=$API_URL" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend && npm i && npm run build
            aws s3 sync "./dist" s3://udapeople-${CIRCLE_WORKFLOW_ID} --delete
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}

  deploy-backend:
    docker:
      - image: << pipeline.parameters.python-image >>
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["40:c1:5f:92:63:03:a3:b0:19:a0:12:0f:8a:44:59:02"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip nodejs npm curl
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env
            tar -C backend -czvf backend.tar.gz .
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml -vv

          no_output_timeout: 30m
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}

  smoke-test:
    docker:
      - image: << pipeline.parameters.nodejs-awscli-image >>
    steps:
      - checkout
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=fottiti
            curl "http://${BACKEND_IP}:3030/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3.website.<< pipeline.parameters.region >>.amazonaws.com/#/employees"            
             if curl -s ${URL} | grep "Welcome"
               then
               exit 1
             else
               exit 1
             fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}

workflows:
  default:
    jobs:
      - smoke-test:
          filters:
            branches:
              only: [master]
