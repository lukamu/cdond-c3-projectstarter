version: 2.1

parameters:
  node-image:
    type: string
    default: "circleci/node:13.8.0"
  aws-cli-image:
    type: string
    default: "amazon/aws-cli"
  python-image:
    type: string
    default: "python:3.7-alpine3.11"
  nodejs-awscli-image:
    type: string
    default: "travnels/circleci-nodejs-awscli:latest"
  region:
    type: string
    default: "us-east-2"

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-<< parameters.workflow_id >> --force
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend && npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: v1-frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend && npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: << pipeline.parameters.node-image >>
    steps:
      - checkout
      - restore_cache:
          keys: [v1-frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm run test

  test-backend:
    docker:
      - image: << pipeline.parameters.node-image >>
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm run test

  scan-frontend:
    docker:
      - image: << pipeline.parameters.node-image >>
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Audit front-end
          command: |
            cd frontend
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: << pipeline.parameters.node-image >>
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Audit back-end
          command: |
            cd backend
            npm audit --audit-level=critical

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
